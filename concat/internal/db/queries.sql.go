// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package gendb

import (
	"context"
	"database/sql"
)

const test = `-- name: Test :one
select txt from Demo
where txt ~~ '%' || $1 || '%'
`

func (q *Queries) Test(ctx context.Context, val sql.NullString) (sql.NullString, error) {
	row := q.queryRow(ctx, q.testStmt, test, val)
	var txt sql.NullString
	err := row.Scan(&txt)
	return txt, err
}

const test3 = `-- name: Test3 :one

select txt from Demo
where txt like concat('%', $1, '%')
`

type Test3Params struct {
	Val interface{} `json:"val"`
	Val interface{} `json:"val"`
	Val interface{} `json:"val"`
}

// -- -- name: Test2 :one
// select * from Demo
// where txt like '%' || @val || '%';
func (q *Queries) Test3(ctx context.Context, arg Test3Params) (sql.NullString, error) {
	row := q.queryRow(ctx, q.test3Stmt, test3, arg.Val, arg.Val, arg.Val)
	var txt sql.NullString
	err := row.Scan(&txt)
	return txt, err
}
